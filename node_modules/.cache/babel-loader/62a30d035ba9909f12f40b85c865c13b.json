{"ast":null,"code":"import { Square } from \"../model/model\"; //Scaling constants for canvas\n\nvar BOXSIZE = 100; //const OFFSET = 8;\n//Representing Rectangles (Squares)\n\nexport class Rectangle {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.width = 100;\n    this.height = 100;\n  }\n\n} //Map piece into rectangle in puzzle view\n\nexport function computeSquare(square) {\n  //let c = square.baseSquares();\n  return new Rectangle(BOXSIZE * square.column, BOXSIZE * square.row);\n} //Draw board\n\nexport function drawBoard(ctx, model, showLabels) {\n  ctx.shaddowColor = 'black';\n  let selected = model.board.selected;\n  model.squares.forEach(square => {\n    let rect = computeSquare(square); /// THIS NEEDS TO CHANGE -- need to import from puzzle file\n\n    if (square === selected) {\n      ctx.fillStyle = 'yellow';\n    } else {\n      ctx.fillStle = 'lightblue';\n    }\n\n    ctx.shadowBlur = 10;\n    ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n  });\n} //Redraw entire canvas from model\n\nexport function redrawCanvas(model, canvasObj, appObj) {\n  //here for testing purposes...\n  if (typeof canvasObj === \"undefined\") {\n    return;\n  }\n\n  const ctx = canvasObj.getContext('2d');\n\n  if (ctx === null) {\n    return;\n  } //clear canvas area before rendering the coordinates held in state\n\n\n  ctx.clearRect(0, 0, canvasObj.width, canvasObj.height);\n  let nr = model.board.numRows;\n  let nc = model.board.numColumns; //ctx.fillStyle = 'yellow';\n  //ctx.fillRect(0,0,100*nc,100*nr);\n\n  if (model) {\n    drawBoard(ctx, model, model.showLabels);\n  }\n}","map":{"version":3,"names":["Square","BOXSIZE","Rectangle","constructor","x","y","width","height","computeSquare","square","column","row","drawBoard","ctx","model","showLabels","shaddowColor","selected","board","squares","forEach","rect","fillStyle","fillStle","shadowBlur","fillRect","redrawCanvas","canvasObj","appObj","getContext","clearRect","nr","numRows","nc","numColumns"],"sources":["/Users/madelinechudy/Documents/GitHub/planarpuzzle/src/boundary/boundary.js"],"sourcesContent":["import { Square } from \"../model/model\";\n\n//Scaling constants for canvas\nvar BOXSIZE = 100;\n//const OFFSET = 8;\n\n//Representing Rectangles (Squares)\nexport class Rectangle {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.width = 100;\n        this.height = 100;\n    }\n}\n\n//Map piece into rectangle in puzzle view\nexport function computeSquare(square) {\n    //let c = square.baseSquares();\n    return new Rectangle(BOXSIZE*square.column, BOXSIZE*square.row);\n}\n\n//Draw board\nexport function drawBoard (ctx, model, showLabels) {\n    ctx.shaddowColor = 'black';\n\n    let selected = model.board.selected;\n\n    model.squares.forEach(square => {\n        let rect = computeSquare(square);\n\n        /// THIS NEEDS TO CHANGE -- need to import from puzzle file\n        if (square === selected) {\n            ctx.fillStyle = 'yellow';}\n        else {\n            ctx.fillStle = 'lightblue';\n        }\n\n    ctx.shadowBlur = 10;\n    ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    })\n}\n\n\n//Redraw entire canvas from model\nexport function redrawCanvas(model, canvasObj, appObj) {\n    //here for testing purposes...\n    if(typeof canvasObj === \"undefined\") { return; }\n    \n    const ctx = canvasObj.getContext('2d');\n    if(ctx === null) { return; }\n\n    //clear canvas area before rendering the coordinates held in state\n    ctx.clearRect(0,0, canvasObj.width, canvasObj.height);\n\n    let nr = model.board.numRows;\n    let nc = model.board.numColumns;\n\n    //ctx.fillStyle = 'yellow';\n   //ctx.fillRect(0,0,100*nc,100*nr);\n\n    if(model) {\n        drawBoard (ctx, model, model.showLabels);\n    }\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB,C,CAEA;;AACA,IAAIC,OAAO,GAAG,GAAd,C,CACA;AAEA;;AACA,OAAO,MAAMC,SAAN,CAAgB;EACnBC,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACd,KAAKD,CAAL,GAASA,CAAT;IACA,KAAKC,CAAL,GAASA,CAAT;IACA,KAAKC,KAAL,GAAa,GAAb;IACA,KAAKC,MAAL,GAAc,GAAd;EACH;;AANkB,C,CASvB;;AACA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;EAClC;EACA,OAAO,IAAIP,SAAJ,CAAcD,OAAO,GAACQ,MAAM,CAACC,MAA7B,EAAqCT,OAAO,GAACQ,MAAM,CAACE,GAApD,CAAP;AACH,C,CAED;;AACA,OAAO,SAASC,SAAT,CAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4C;EAC/CF,GAAG,CAACG,YAAJ,GAAmB,OAAnB;EAEA,IAAIC,QAAQ,GAAGH,KAAK,CAACI,KAAN,CAAYD,QAA3B;EAEAH,KAAK,CAACK,OAAN,CAAcC,OAAd,CAAsBX,MAAM,IAAI;IAC5B,IAAIY,IAAI,GAAGb,aAAa,CAACC,MAAD,CAAxB,CAD4B,CAG5B;;IACA,IAAIA,MAAM,KAAKQ,QAAf,EAAyB;MACrBJ,GAAG,CAACS,SAAJ,GAAgB,QAAhB;IAA0B,CAD9B,MAEK;MACDT,GAAG,CAACU,QAAJ,GAAe,WAAf;IACH;;IAELV,GAAG,CAACW,UAAJ,GAAiB,EAAjB;IACAX,GAAG,CAACY,QAAJ,CAAaJ,IAAI,CAACjB,CAAlB,EAAqBiB,IAAI,CAAChB,CAA1B,EAA6BgB,IAAI,CAACf,KAAlC,EAAyCe,IAAI,CAACd,MAA9C;EACC,CAZD;AAaH,C,CAGD;;AACA,OAAO,SAASmB,YAAT,CAAsBZ,KAAtB,EAA6Ba,SAA7B,EAAwCC,MAAxC,EAAgD;EACnD;EACA,IAAG,OAAOD,SAAP,KAAqB,WAAxB,EAAqC;IAAE;EAAS;;EAEhD,MAAMd,GAAG,GAAGc,SAAS,CAACE,UAAV,CAAqB,IAArB,CAAZ;;EACA,IAAGhB,GAAG,KAAK,IAAX,EAAiB;IAAE;EAAS,CALuB,CAOnD;;;EACAA,GAAG,CAACiB,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAmBH,SAAS,CAACrB,KAA7B,EAAoCqB,SAAS,CAACpB,MAA9C;EAEA,IAAIwB,EAAE,GAAGjB,KAAK,CAACI,KAAN,CAAYc,OAArB;EACA,IAAIC,EAAE,GAAGnB,KAAK,CAACI,KAAN,CAAYgB,UAArB,CAXmD,CAanD;EACD;;EAEC,IAAGpB,KAAH,EAAU;IACNF,SAAS,CAAEC,GAAF,EAAOC,KAAP,EAAcA,KAAK,CAACC,UAApB,CAAT;EACH;AACJ"},"metadata":{},"sourceType":"module"}