{"ast":null,"code":"export class Square {\n  constructor(row, column, color, moveNum, base, unusable) {\n    this.row = row;\n    this.column = column;\n    this.color = color;\n    this.moveNum = moveNum;\n    this.base = base;\n    this.unusable = unusable;\n  }\n\n}\nexport class Board {\n  constructor(numRows, numColumns) {\n    this.numRows = numRows;\n    this.numColumns = numColumns;\n    this.selected = false; //this.squares = [];\n  }\n\n}\nexport default class Model {\n  constructor(info) {\n    this.initialize(info);\n  }\n\n  initialize(info) {\n    let numRows = parseInt(info.numRows);\n    let numColumns = parseInt(info.numColumns);\n    var allSquares = [];\n\n    for (let s of info.baseSquares) {\n      allSquares.push(new Square(parseInt(s.row), parseInt(s.column), s.color, 0, true, false));\n    }\n\n    for (let s of info.unusedSquares) {\n      allSquares.push(new Square(parseInt(s.row), parseInt(s.column), 'black', null, false, true));\n    } //white squares\n\n\n    var rowIterator = 0;\n    var columnIterator = 0;\n\n    while (rowIterator < numRows) {\n      while (columnIterator < numColumns) {\n        var foundSquare = false;\n\n        for (let x in allSquares) {\n          if (x.row == rowIterator && x.column == columnIterator) {\n            foundSquare = true;\n            break;\n          }\n        }\n\n        if (foundSquare == false) {\n          allSquares.push(new Square(rowIterator, columnIterator, 'white', null, false, false));\n        }\n\n        columnIterator += 1;\n      }\n\n      rowIterator += 1;\n    }\n\n    this.board = new Board(numRows, numColumns);\n    this.squares = allSquares;\n    this.victory = false;\n    this.showlabels = false;\n  }\n\n}\nexport class moveDirection {\n  constructor(deltar, deltac) {\n    this.deltar = deltar;\n    this.deltac = deltac;\n  }\n\n}\nexport const Down = new moveDirection(1, 0);\nexport const Up = new moveDirection(-1, 0);\nexport const Left = new moveDirection(0, -1);\nexport const Right = new moveDirection(0, 1);","map":{"version":3,"names":["Square","constructor","row","column","color","moveNum","base","unusable","Board","numRows","numColumns","selected","Model","info","initialize","parseInt","allSquares","s","baseSquares","push","unusedSquares","rowIterator","columnIterator","foundSquare","x","board","squares","victory","showlabels","moveDirection","deltar","deltac","Down","Up","Left","Right"],"sources":["/Users/madelinechudy/Documents/GitHub/planarpuzzle/src/model/model.js"],"sourcesContent":["export class Square { \n    constructor(row, column, color, moveNum, base, unusable) { \n        this.row = row;\n        this.column = column;\n        this.color = color;\n        this.moveNum = moveNum;\n        this.base = base;\n        this.unusable = unusable;\n    }\n\n}\n\nexport class Board { \n    constructor(numRows, numColumns) { \n        this.numRows = numRows;\n        this.numColumns = numColumns;\n        this.selected = false;\n        //this.squares = [];\n    }\n\n}\n\n\nexport default class Model { \n    constructor(info) { \n        this.initialize(info);\n    }\n\n    initialize(info) { \n        let numRows = parseInt(info.numRows);\n        let numColumns = parseInt(info.numColumns);\n        \n        var allSquares = [];\n        for(let s of info.baseSquares) {\n            allSquares.push(new Square(parseInt(s.row), parseInt(s.column), s.color, 0, true, false));\n        }\n        for(let s of info.unusedSquares) {\n            allSquares.push(new Square(parseInt(s.row), parseInt(s.column), 'black', null, false, true));\n        }\n        \n        //white squares\n        var rowIterator = 0;\n        var columnIterator = 0;\n        while(rowIterator < numRows){\n            while(columnIterator < numColumns) {\n\n                var foundSquare = false;\n\n                for(let x in allSquares) {\n                    if(x.row == rowIterator && x.column == columnIterator) {\n                        foundSquare = true;\n                        break;\n                    }\n                }\n                if (foundSquare == false) {\n                    allSquares.push(new Square(rowIterator, columnIterator, 'white', null, false, false));\n                }\n                columnIterator += 1;\n            }\n            rowIterator += 1;\n        }\n        \n   \n        this.board = new Board(numRows, numColumns);\n        this.squares = allSquares;\n        this.victory = false;\n\n        this.showlabels = false;\n    }\n}\n\nexport class moveDirection { \n    constructor(deltar, deltac) { \n        this.deltar = deltar;\n        this.deltac = deltac;\n    }\n}\n\nexport const Down = new moveDirection(1, 0);\nexport const Up = new moveDirection(-1, 0);\nexport const Left = new moveDirection(0, -1);\nexport const Right = new moveDirection(0, 1);"],"mappings":"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"},"metadata":{},"sourceType":"module"}