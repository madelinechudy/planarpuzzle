{"ast":null,"code":"export class Square {\n  constructor(row, column, color, moveNum, base, unusable) {\n    this.row = row;\n    this.column = column;\n    this.color = color;\n    this.moveNum = moveNum;\n    this.base = base;\n    this.unusable = unusable;\n  }\n\n  place(row, col) {\n    this.row = row;\n    this.column = col;\n  } //place(row, col) {\n  //     this.row = row;\n  //     this.column = col;\n  //  }\n\n\n}\nexport class Board {\n  constructor(numRows, numColumns) {\n    this.numRows = numRows;\n    this.numColumns = numColumns;\n    this.selected = false;\n    this.squares = [];\n  } //blocks() {\n  //    for (let i = 0; i < this.squares.length; i++) {\n  //        yield this.squares[i];\n  //    };\n  //}\n\n\n}\nexport default class Model {\n  constructor(info) {\n    this.initialize(info);\n  }\n\n  initialize(info) {\n    let numRows = parseInt(info.numRows);\n    let numColumns = parseInt(info.numColumns);\n    let squareinfo = parseInt(info.baseSquares); //this is wrong, need a way to place base squares\n\n    var allSquares = [];\n\n    for (let s of info.baseSquares) {\n      allSquares.push(new Square(parseInt(s.row), parseInt(s.column), parseInt(s.color), 0, true, false));\n    }\n\n    for (let s of info.baseSquares) {\n      allSquares.place(s.row, s.col);\n    } //figure out how to parse square info\n\n\n    this.board = new Board(numRows, numColumns); //this.board.initialize(allSquares);\n\n    this.victory = false;\n    this.showlabels = false;\n  }\n\n}\nexport class moveDirection {\n  constructor(deltar, deltac) {\n    this.deltar = deltar;\n    this.deltac = deltac;\n  }\n\n}\nexport const Down = new moveDirection(1, 0, 'down');\nexport const Up = new moveDirection(-1, 0, 'up');\nexport const Left = new moveDirection(0, -1, 'left');\nexport const Right = new moveDirection(0, 1, 'right');","map":{"version":3,"names":["Square","constructor","row","column","color","moveNum","base","unusable","place","col","Board","numRows","numColumns","selected","squares","Model","info","initialize","parseInt","squareinfo","baseSquares","allSquares","s","push","board","victory","showlabels","moveDirection","deltar","deltac","Down","Up","Left","Right"],"sources":["/Users/madelinechudy/Documents/GitHub/planarpuzzle/src/model/model.js"],"sourcesContent":["export class Square { \n    constructor(row, column, color, moveNum, base, unusable) { \n        this.row = row;\n        this.column = column;\n        this.color = color;\n        this.moveNum = moveNum;\n        this.base = base;\n        this.unusable = unusable;\n    }\n\n    place(row, col) {\n        this.row = row;\n        this.column = col;\n    }\n\n    //place(row, col) {\n   //     this.row = row;\n   //     this.column = col;\n  //  }\n}\n\nexport class Board { \n    constructor(numRows, numColumns) { \n        this.numRows = numRows;\n        this.numColumns = numColumns;\n        this.selected = false;\n        this.squares = [];\n    }\n    \n    //blocks() {\n    //    for (let i = 0; i < this.squares.length; i++) {\n    //        yield this.squares[i];\n    //    };\n    //}\n    \n}\n\n\nexport default class Model { \n    constructor(info) { \n        this.initialize(info);\n    }\n\n    initialize(info) { \n        let numRows = parseInt(info.numRows);\n        let numColumns = parseInt(info.numColumns);\n        let squareinfo = parseInt(info.baseSquares); //this is wrong, need a way to place base squares\n        \n        var allSquares = [];\n        for(let s of info.baseSquares) {\n            allSquares.push(new Square(parseInt(s.row), parseInt(s.column), parseInt(s.color), 0, true, false));\n        }\n\n        for(let s of info.baseSquares) { \n            allSquares.place(s.row, s.col);\n        }\n\n        \n\n        //figure out how to parse square info\n        this.board = new Board(numRows, numColumns);\n        //this.board.initialize(allSquares);\n        this.victory = false;\n\n        this.showlabels = false;\n    }\n}\n\nexport class moveDirection { \n    constructor(deltar, deltac) { \n        this.deltar = deltar;\n        this.deltac = deltac;\n    }\n}\n\nexport const Down = new moveDirection(1, 0, 'down');\nexport const Up = new moveDirection(-1, 0, 'up');\nexport const Left = new moveDirection(0, -1, 'left');\nexport const Right = new moveDirection(0, 1, 'right');"],"mappings":"AAAA,OAAO,MAAMA,MAAN,CAAa;EAChBC,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAcC,KAAd,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoCC,QAApC,EAA8C;IACrD,KAAKL,GAAL,GAAWA,GAAX;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,QAAL,GAAgBA,QAAhB;EACH;;EAEDC,KAAK,CAACN,GAAD,EAAMO,GAAN,EAAW;IACZ,KAAKP,GAAL,GAAWA,GAAX;IACA,KAAKC,MAAL,GAAcM,GAAd;EACH,CAbe,CAehB;EACD;EACA;EACD;;;AAlBkB;AAqBpB,OAAO,MAAMC,KAAN,CAAY;EACfT,WAAW,CAACU,OAAD,EAAUC,UAAV,EAAsB;IAC7B,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKC,QAAL,GAAgB,KAAhB;IACA,KAAKC,OAAL,GAAe,EAAf;EACH,CANc,CAQf;EACA;EACA;EACA;EACA;;;AAZe;AAiBnB,eAAe,MAAMC,KAAN,CAAY;EACvBd,WAAW,CAACe,IAAD,EAAO;IACd,KAAKC,UAAL,CAAgBD,IAAhB;EACH;;EAEDC,UAAU,CAACD,IAAD,EAAO;IACb,IAAIL,OAAO,GAAGO,QAAQ,CAACF,IAAI,CAACL,OAAN,CAAtB;IACA,IAAIC,UAAU,GAAGM,QAAQ,CAACF,IAAI,CAACJ,UAAN,CAAzB;IACA,IAAIO,UAAU,GAAGD,QAAQ,CAACF,IAAI,CAACI,WAAN,CAAzB,CAHa,CAGgC;;IAE7C,IAAIC,UAAU,GAAG,EAAjB;;IACA,KAAI,IAAIC,CAAR,IAAaN,IAAI,CAACI,WAAlB,EAA+B;MAC3BC,UAAU,CAACE,IAAX,CAAgB,IAAIvB,MAAJ,CAAWkB,QAAQ,CAACI,CAAC,CAACpB,GAAH,CAAnB,EAA4BgB,QAAQ,CAACI,CAAC,CAACnB,MAAH,CAApC,EAAgDe,QAAQ,CAACI,CAAC,CAAClB,KAAH,CAAxD,EAAmE,CAAnE,EAAsE,IAAtE,EAA4E,KAA5E,CAAhB;IACH;;IAED,KAAI,IAAIkB,CAAR,IAAaN,IAAI,CAACI,WAAlB,EAA+B;MAC3BC,UAAU,CAACb,KAAX,CAAiBc,CAAC,CAACpB,GAAnB,EAAwBoB,CAAC,CAACb,GAA1B;IACH,CAZY,CAgBb;;;IACA,KAAKe,KAAL,GAAa,IAAId,KAAJ,CAAUC,OAAV,EAAmBC,UAAnB,CAAb,CAjBa,CAkBb;;IACA,KAAKa,OAAL,GAAe,KAAf;IAEA,KAAKC,UAAL,GAAkB,KAAlB;EACH;;AA3BsB;AA8B3B,OAAO,MAAMC,aAAN,CAAoB;EACvB1B,WAAW,CAAC2B,MAAD,EAASC,MAAT,EAAiB;IACxB,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACH;;AAJsB;AAO3B,OAAO,MAAMC,IAAI,GAAG,IAAIH,aAAJ,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,MAAxB,CAAb;AACP,OAAO,MAAMI,EAAE,GAAG,IAAIJ,aAAJ,CAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyB,IAAzB,CAAX;AACP,OAAO,MAAMK,IAAI,GAAG,IAAIL,aAAJ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,EAAyB,MAAzB,CAAb;AACP,OAAO,MAAMM,KAAK,GAAG,IAAIN,aAAJ,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,OAAxB,CAAd"},"metadata":{},"sourceType":"module"}