{"ast":null,"code":"import { Square } from \"../model/model\"; //Scaling constants for canvas\n\nvar BOXSIZE = 100;\nconst OFFSET = 8; //Representing Rectangles (Squares)\n\nexport class Rectangle {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.width = 10;\n    this.height = 10;\n  }\n\n} //Map piece into rectangle in puzzle view\n\nexport function computeSquare(square) {\n  let c = square.baseSquares();\n  return new Rectangle(BOXSIZE * c.column + OFFSET, BOXSIZE * c.row + OFFSET);\n} //Draw board\n\nexport function drawBoard(ctx, board, showLabels) {\n  ctx.shaddowColor = 'black';\n  let selected = board.selected;\n  allsquares.forEach(square => {\n    let rect = computeSquare(square); /// THIS NEEDS TO CHANGE -- need to import from puzzle file\n\n    if (square === selected) {\n      ctx.fillStyle = 'yellow';\n    } else {\n      ctx.fillStle = 'lightblue';\n    }\n\n    ctx.shadowBlur = 10;\n    ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n  });\n} //Redraw entire canvas from model\n\nexport function redrawCanvas(model, canvasObj, appObj) {\n  //here for testing purposes...\n  if (typeof canvasObj === \"undefined\") {\n    return;\n  }\n\n  const ctx = canvasObj.getContext('2d');\n\n  if (ctx === null) {\n    return;\n  } //clear canvas area before rendering the coordinates held in state\n\n\n  ctx.clearRect(0, 0, canvasObj.width, canvasObj.height);\n  let nr = model.board.numRows;\n  let nc = model.board.numColumns; //ctx.fillStyle = 'yellow';\n  //ctx.fillRect(0,0,100*nc,100*nr);\n\n  if (model.board) {\n    drawBoard(ctx, model.board, model.showLabels);\n  }\n}","map":{"version":3,"names":["Square","BOXSIZE","OFFSET","Rectangle","constructor","x","y","width","height","computeSquare","square","c","baseSquares","column","row","drawBoard","ctx","board","showLabels","shaddowColor","selected","allsquares","forEach","rect","fillStyle","fillStle","shadowBlur","fillRect","redrawCanvas","model","canvasObj","appObj","getContext","clearRect","nr","numRows","nc","numColumns"],"sources":["/Users/madelinechudy/Documents/GitHub/planarpuzzle/src/boundary/boundary.js"],"sourcesContent":["import { Square } from \"../model/model\";\n\n//Scaling constants for canvas\nvar BOXSIZE = 100;\nconst OFFSET = 8;\n\n//Representing Rectangles (Squares)\nexport class Rectangle {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.width = 10;\n        this.height = 10;\n    }\n}\n\n//Map piece into rectangle in puzzle view\nexport function computeSquare(square) {\n    let c = square.baseSquares();\n    return new Rectangle(BOXSIZE*c.column + OFFSET, BOXSIZE*c.row + OFFSET);\n}\n\n//Draw board\nexport function drawBoard (ctx, board, showLabels) {\n    ctx.shaddowColor = 'black';\n\n    let selected = board.selected;\n\n    allsquares.forEach(square => {\n        let rect = computeSquare(square);\n\n        /// THIS NEEDS TO CHANGE -- need to import from puzzle file\n        if (square === selected) {\n            ctx.fillStyle = 'yellow';}\n        else {\n            ctx.fillStle = 'lightblue';\n        }\n\n    ctx.shadowBlur = 10;\n    ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    })\n}\n\n\n//Redraw entire canvas from model\nexport function redrawCanvas(model, canvasObj, appObj) {\n    //here for testing purposes...\n    if(typeof canvasObj === \"undefined\") { return; }\n    \n    const ctx = canvasObj.getContext('2d');\n    if(ctx === null) { return; }\n\n    //clear canvas area before rendering the coordinates held in state\n    ctx.clearRect(0,0, canvasObj.width, canvasObj.height);\n\n    let nr = model.board.numRows;\n    let nc = model.board.numColumns;\n\n    //ctx.fillStyle = 'yellow';\n   //ctx.fillRect(0,0,100*nc,100*nr);\n\n    if(model.board) {\n        drawBoard (ctx, model.board, model.showLabels);\n    }\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB,C,CAEA;;AACA,IAAIC,OAAO,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,CAAf,C,CAEA;;AACA,OAAO,MAAMC,SAAN,CAAgB;EACnBC,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACd,KAAKD,CAAL,GAASA,CAAT;IACA,KAAKC,CAAL,GAASA,CAAT;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,MAAL,GAAc,EAAd;EACH;;AANkB,C,CASvB;;AACA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;EAClC,IAAIC,CAAC,GAAGD,MAAM,CAACE,WAAP,EAAR;EACA,OAAO,IAAIT,SAAJ,CAAcF,OAAO,GAACU,CAAC,CAACE,MAAV,GAAmBX,MAAjC,EAAyCD,OAAO,GAACU,CAAC,CAACG,GAAV,GAAgBZ,MAAzD,CAAP;AACH,C,CAED;;AACA,OAAO,SAASa,SAAT,CAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4C;EAC/CF,GAAG,CAACG,YAAJ,GAAmB,OAAnB;EAEA,IAAIC,QAAQ,GAAGH,KAAK,CAACG,QAArB;EAEAC,UAAU,CAACC,OAAX,CAAmBZ,MAAM,IAAI;IACzB,IAAIa,IAAI,GAAGd,aAAa,CAACC,MAAD,CAAxB,CADyB,CAGzB;;IACA,IAAIA,MAAM,KAAKU,QAAf,EAAyB;MACrBJ,GAAG,CAACQ,SAAJ,GAAgB,QAAhB;IAA0B,CAD9B,MAEK;MACDR,GAAG,CAACS,QAAJ,GAAe,WAAf;IACH;;IAELT,GAAG,CAACU,UAAJ,GAAiB,EAAjB;IACAV,GAAG,CAACW,QAAJ,CAAaJ,IAAI,CAAClB,CAAlB,EAAqBkB,IAAI,CAACjB,CAA1B,EAA6BiB,IAAI,CAAChB,KAAlC,EAAyCgB,IAAI,CAACf,MAA9C;EACC,CAZD;AAaH,C,CAGD;;AACA,OAAO,SAASoB,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgD;EACnD;EACA,IAAG,OAAOD,SAAP,KAAqB,WAAxB,EAAqC;IAAE;EAAS;;EAEhD,MAAMd,GAAG,GAAGc,SAAS,CAACE,UAAV,CAAqB,IAArB,CAAZ;;EACA,IAAGhB,GAAG,KAAK,IAAX,EAAiB;IAAE;EAAS,CALuB,CAOnD;;;EACAA,GAAG,CAACiB,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAmBH,SAAS,CAACvB,KAA7B,EAAoCuB,SAAS,CAACtB,MAA9C;EAEA,IAAI0B,EAAE,GAAGL,KAAK,CAACZ,KAAN,CAAYkB,OAArB;EACA,IAAIC,EAAE,GAAGP,KAAK,CAACZ,KAAN,CAAYoB,UAArB,CAXmD,CAanD;EACD;;EAEC,IAAGR,KAAK,CAACZ,KAAT,EAAgB;IACZF,SAAS,CAAEC,GAAF,EAAOa,KAAK,CAACZ,KAAb,EAAoBY,KAAK,CAACX,UAA1B,CAAT;EACH;AACJ"},"metadata":{},"sourceType":"module"}