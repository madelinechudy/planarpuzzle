{"ast":null,"code":"export class Square {\n  constructor(row, column, color, moveNum, base, unusable) {\n    this.row = row;\n    this.column = column;\n    this.color = color;\n    this.moveNum = moveNum;\n    this.base = base;\n    this.unusable = unusable;\n  } // used for solving\n\n\n  copy() {\n    let s = new Square(this.row, this.column, this.color, this.moveNum, this.base, this.unusable);\n    return s;\n  }\n\n}\nexport class Board {\n  constructor(numRows, numColumns) {\n    this.numRows = numRows;\n    this.numColumns = numColumns;\n    this.selected = false;\n  }\n\n  initialize(squares) {\n    this.squares = squares.map(s => s.copy());\n  }\n\n  select(square) {\n    this.selected = square;\n  }\n\n  isSelected(square) {\n    return square === this.selected;\n  }\n\n  clone() {\n    let copy = new Board(this.numRows, this.numColumns);\n    copy.squares = [];\n\n    for (let s of this.squares) {\n      let dup = s.copy();\n      copy.squares.push(dup);\n\n      if (s === this.selected) {\n        copy.selected = dup;\n      }\n    }\n\n    return copy;\n  }\n\n}\nexport default class Model {\n  constructor(info) {\n    this.initialize(info);\n    this.info = info;\n  }\n\n  initialize(info) {\n    let numRows = parseInt(info.numRows);\n    let numColumns = parseInt(info.numColumns);\n    var allSquares = [];\n\n    for (let s of info.baseSquares) {\n      allSquares.push(new Square(parseInt(s.row), parseInt(s.column), s.color, 0, true, false));\n    }\n\n    for (let s of info.unusedSquares) {\n      allSquares.push(new Square(parseInt(s.row), parseInt(s.column), 'black', null, false, true));\n    } //white squares\n\n\n    var rowIterator = 0;\n\n    while (rowIterator < numRows) {\n      var columnIterator = 0;\n\n      while (columnIterator < numColumns) {\n        var foundSquare = false;\n\n        for (let ite in allSquares) {\n          var obj = allSquares[ite];\n\n          if (obj.row == rowIterator && obj.column == columnIterator) {\n            foundSquare = true;\n            break;\n          }\n        }\n\n        if (foundSquare == false) {\n          allSquares.push(new Square(rowIterator, columnIterator, 'white', null, false, false));\n        }\n\n        columnIterator = columnIterator + 1;\n      }\n\n      rowIterator = rowIterator + 1;\n    }\n\n    this.board = new Board(numRows, numColumns);\n    this.board.initialize(allPieces);\n    this.squares = allSquares;\n    this.victory = false;\n    this.showlabels = false;\n  }\n\n  copy() {\n    let m = new Model(this.info);\n    m.board = this.board.clone();\n    m.numMoves = this.numMoves;\n    m.showLabels = this.showLabels;\n    m.victory = this.victory;\n    return m;\n  }\n\n}\nexport class moveDirection {\n  constructor(deltar, deltac) {\n    this.deltar = deltar;\n    this.deltac = deltac;\n  }\n\n}\nexport const Down = new moveDirection(1, 0);\nexport const Up = new moveDirection(-1, 0);\nexport const Left = new moveDirection(0, -1);\nexport const Right = new moveDirection(0, 1);","map":{"version":3,"names":["Square","constructor","row","column","color","moveNum","base","unusable","copy","s","Board","numRows","numColumns","selected","initialize","squares","map","select","square","isSelected","clone","dup","push","Model","info","parseInt","allSquares","baseSquares","unusedSquares","rowIterator","columnIterator","foundSquare","ite","obj","board","allPieces","victory","showlabels","m","numMoves","showLabels","moveDirection","deltar","deltac","Down","Up","Left","Right"],"sources":["/Users/madelinechudy/Documents/GitHub/planarpuzzle/src/model/model.js"],"sourcesContent":["export class Square { \n    constructor(row, column, color, moveNum, base, unusable) { \n        this.row = row;\n        this.column = column;\n        this.color = color;\n        this.moveNum = moveNum;\n        this.base = base;\n        this.unusable = unusable;\n    }\n    \n    // used for solving\n    copy() {\n        let s = new Square(this.row, this.column, this.color, this.moveNum, this.base, this.unusable);\n        return s;\n    }\n}\n\nexport class Board { \n    constructor(numRows, numColumns) { \n        this.numRows = numRows;\n        this.numColumns = numColumns;\n        this.selected = false;\n    }\n\n    initialize(squares) {\n        this.squares = squares.map(s => s.copy());\n    }\n\n    select(square) {\n        this.selected = square;\n    }\n\n    isSelected(square) {\n        return square === this.selected;\n    }\n\n    clone() {\n        let copy = new Board(this.numRows, this.numColumns);\n        copy.squares = []; \n        for (let s of this.squares) {\n            let dup = s.copy();\n            copy.squares.push(dup);\n            if(s === this.selected) {\n                copy.selected = dup;\n            }\n        }\n        return copy;\n    }\n\n}\n\n\nexport default class Model { \n    constructor(info) { \n        this.initialize(info);\n        this.info = info;\n    }\n\n    initialize(info) { \n        let numRows = parseInt(info.numRows);\n        let numColumns = parseInt(info.numColumns);\n        \n        var allSquares = [];\n        for(let s of info.baseSquares) {\n            allSquares.push(new Square(parseInt(s.row), parseInt(s.column), s.color, 0, true, false));\n        }\n        for(let s of info.unusedSquares) {\n            allSquares.push(new Square(parseInt(s.row), parseInt(s.column), 'black', null, false, true));\n        }\n        \n        //white squares\n        var rowIterator = 0\n        while(rowIterator < numRows){\n            \n            var columnIterator = 0\n            while(columnIterator < numColumns) {\n\n                var foundSquare = false;\n\n                for(let ite in allSquares) {\n                    var obj = allSquares[ite]\n                    if(obj.row == rowIterator && obj.column == columnIterator) {\n                        foundSquare = true;\n                        break;\n                    }\n                }\n                if (foundSquare == false) {\n                    allSquares.push(new Square(rowIterator, columnIterator, 'white', null, false, false));\n                }\n                columnIterator = columnIterator + 1;\n            }\n            rowIterator = rowIterator + 1;\n        }\n        \n   \n        this.board = new Board(numRows, numColumns);\n        this.board.initialize(allPieces);\n        this.squares = allSquares;\n        this.victory = false;\n\n        this.showlabels = false;\n    }\n\n    copy() {\n        let m = new Model(this.info);\n        m.board = this.board.clone();\n        m.numMoves = this.numMoves;\n        m.showLabels = this.showLabels;\n        m.victory = this.victory;\n        return m;\n    }\n\n}\n\nexport class moveDirection { \n    constructor(deltar, deltac) { \n        this.deltar = deltar;\n        this.deltac = deltac;\n    }\n}\n\nexport const Down = new moveDirection(1, 0);\nexport const Up = new moveDirection(-1, 0);\nexport const Left = new moveDirection(0, -1);\nexport const Right = new moveDirection(0, 1);"],"mappings":"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"},"metadata":{},"sourceType":"module"}